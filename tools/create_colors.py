#!/usr/bin/env python3

# https://coolors.co

COLORS = [
    ("black", "#000000"),
    ("white", "#ffffff"),
    ("red", "#ff0000"),
    ("lime", "#00ff00"),
    ("blue", "#0000ff"),
    ("yellow", "#ffff00"),
    ("cyan", "#00ffff"),
    ("magenta", "#ff00ff"),
    ("maroon", "#800000"),
    ("olive", "#808000"),
    ("green", "#008000"),
    ("purple", "#800080"),
    ("teal", "#008080"),
    ("navy", "#000080"),
    ("dim_gray", "#696969"),
    ("gainsboro", "#dcdcdc"),
    ("white_smoke", "#f5f5f5"),
    ("ash_gray", "#b2beb5"),
    ("blue_gray", "#7393b3"),
    ("charcoal", "#36454f"),
    ("dark_gray", "#a9a9a9"),
    ("glaucous", "#6082b6"),
    ("gray", "#808080"),
    ("gunmetal_gray", "#818589"),
    ("light_gray", "#d3d3d3"),
    ("pewter", "#899499"),
    ("platinum", "#e5e4e2"),
    ("sage_green", "#8a9a5b"),
    ("silver", "#c0c0c0"),
    ("slate_gray", "#708090"),
    ("smoke", "#848884"),
    ("steel_gray", "#71797e"),
    ("folder_back", "#1e3319"),
    ("folder_title", "#94bc8a"),
    ("folder_msg", "#c0cebf"),
    ("archive_back", "#23213c"),
    ("archive_title", "#89a6d2"),
    ("archive_msg", "#c3ccd9"),
    ("unsupported_back", "#292500"),
    ("unsupported_title", "#c4b850"),
    ("unsupported_msg", "#d0cc9f"),
    ("error_back", "#372020"),
    ("error_title", "#b38888"),
    ("error_msg", "#dbb5b5"),
]


CHUNK1 = """// MView6 -- High-performance PDF and photo viewer built with Rust and GTK4
//
// Copyright (c) 2024-2025 Martin van der Werff <github (at) newinnovations.nl>
//
// This file is part of MView6.
//
// MView6 is free software: you can redistribute it and/or modify it under the terms of
// the GNU Affero General Public License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// **DO NOT EDIT** This file is generated by tools/create_colors.py

use cairo::Context;

#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Color {
"""

CHUNK3 = """}

impl Color {
    pub fn to_mview(self) -> MViewColor {
        match self {
"""
# Color::Red => RED,
CHUNK4 = """        }
    }

    pub fn to_hex(self) -> String {
        self.to_mview().to_hex()
    }
}

pub trait CairoColorExt {
    fn color(&self, color: Color);
}

impl CairoColorExt for Context {
    fn color(&self, color: Color) {
        let c = color.to_mview();
        self.set_source_rgb(c.r as f64 / 255.0, c.g as f64 / 255.0, c.b as f64 / 255.0);
    }
}

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct MViewColor {
    r: u8,
    g: u8,
    b: u8,
}

impl MViewColor {
    pub fn to_hex(self) -> String {
        format!("#{:02X}{:02X}{:02X}", self.r, self.g, self.b)
    }
}

"""


def camel_case(word):
    return "".join(x.capitalize() or "_" for x in word.split("_"))


def main(f):
    f.write(CHUNK1)

    for name, color in COLORS:
        name = camel_case(name)
        f.write(f"    {name}, // {color.lower()}\n")

    f.write(CHUNK3)

    for name, color in COLORS:
        name_up = name.upper()
        name_cc = camel_case(name)
        f.write(f"            Self::{name_cc} => {name_up},\n")

    f.write(CHUNK4)

    for name, color in COLORS:
        name = name.upper()
        h = bytes.fromhex(color.replace("#", ""))
        f.write(
            f"const {name}: MViewColor = MViewColor {{ r: 0x{h[0]:02x}, g: 0x{h[1]:02x}, b: 0x{h[2]:02x} }};\n"
        )


if __name__ == "__main__":
    with open("../src/image/colors.rs", "w") as f:
        main(f)
