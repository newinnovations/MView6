// MView6 -- High-performance PDF and photo viewer built with Rust and GTK4
//
// Copyright (c) 2024-2025 Martin van der Werff <github (at) newinnovations.nl>
//
// This file is part of MView6.
//
// MView6 is free software: you can redistribute it and/or modify it under the terms of
// the GNU Affero General Public License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// **DO NOT EDIT** This file is generated by tools/create_colors.py

#![allow(dead_code)]

use cairo::Context;

#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Color {
    Black,            // #000000
    White,            // #ffffff
    Red,              // #ff0000
    Lime,             // #00ff00
    Blue,             // #0000ff
    Yellow,           // #ffff00
    Cyan,             // #00ffff
    Magenta,          // #ff00ff
    Maroon,           // #800000
    Olive,            // #808000
    Green,            // #008000
    Purple,           // #800080
    Teal,             // #008080
    Navy,             // #000080
    DimGray,          // #696969
    Gainsboro,        // #dcdcdc
    WhiteSmoke,       // #f5f5f5
    AshGray,          // #b2beb5
    BlueGray,         // #7393b3
    Charcoal,         // #36454f
    DarkGray,         // #a9a9a9
    Glaucous,         // #6082b6
    Gray,             // #808080
    GunmetalGray,     // #818589
    LightGray,        // #d3d3d3
    Pewter,           // #899499
    Platinum,         // #e5e4e2
    SageGreen,        // #8a9a5b
    Silver,           // #c0c0c0
    SlateGray,        // #708090
    Smoke,            // #848884
    SteelGray,        // #71797e
    FolderBack,       // #1e3319
    FolderTitle,      // #94bc8a
    FolderMsg,        // #c0cebf
    ArchiveBack,      // #23213c
    ArchiveTitle,     // #89a6d2
    ArchiveMsg,       // #c3ccd9
    UnsupportedBack,  // #292500
    UnsupportedTitle, // #c4b850
    UnsupportedMsg,   // #d0cc9f
    ErrorBack,        // #372020
    ErrorTitle,       // #b38888
    ErrorMsg,         // #dbb5b5
}

impl Color {
    pub fn to_mview(self) -> MViewColor {
        match self {
            Self::Black => BLACK,
            Self::White => WHITE,
            Self::Red => RED,
            Self::Lime => LIME,
            Self::Blue => BLUE,
            Self::Yellow => YELLOW,
            Self::Cyan => CYAN,
            Self::Magenta => MAGENTA,
            Self::Maroon => MAROON,
            Self::Olive => OLIVE,
            Self::Green => GREEN,
            Self::Purple => PURPLE,
            Self::Teal => TEAL,
            Self::Navy => NAVY,
            Self::DimGray => DIM_GRAY,
            Self::Gainsboro => GAINSBORO,
            Self::WhiteSmoke => WHITE_SMOKE,
            Self::AshGray => ASH_GRAY,
            Self::BlueGray => BLUE_GRAY,
            Self::Charcoal => CHARCOAL,
            Self::DarkGray => DARK_GRAY,
            Self::Glaucous => GLAUCOUS,
            Self::Gray => GRAY,
            Self::GunmetalGray => GUNMETAL_GRAY,
            Self::LightGray => LIGHT_GRAY,
            Self::Pewter => PEWTER,
            Self::Platinum => PLATINUM,
            Self::SageGreen => SAGE_GREEN,
            Self::Silver => SILVER,
            Self::SlateGray => SLATE_GRAY,
            Self::Smoke => SMOKE,
            Self::SteelGray => STEEL_GRAY,
            Self::FolderBack => FOLDER_BACK,
            Self::FolderTitle => FOLDER_TITLE,
            Self::FolderMsg => FOLDER_MSG,
            Self::ArchiveBack => ARCHIVE_BACK,
            Self::ArchiveTitle => ARCHIVE_TITLE,
            Self::ArchiveMsg => ARCHIVE_MSG,
            Self::UnsupportedBack => UNSUPPORTED_BACK,
            Self::UnsupportedTitle => UNSUPPORTED_TITLE,
            Self::UnsupportedMsg => UNSUPPORTED_MSG,
            Self::ErrorBack => ERROR_BACK,
            Self::ErrorTitle => ERROR_TITLE,
            Self::ErrorMsg => ERROR_MSG,
        }
    }

    pub fn to_hex(self) -> String {
        self.to_mview().to_hex()
    }
}

pub trait CairoColorExt {
    fn color(&self, color: Color);
}

impl CairoColorExt for Context {
    fn color(&self, color: Color) {
        let c = color.to_mview();
        self.set_source_rgb(c.r as f64 / 255.0, c.g as f64 / 255.0, c.b as f64 / 255.0);
    }
}

#[derive(Debug, Clone, Copy, PartialEq)]
pub struct MViewColor {
    r: u8,
    g: u8,
    b: u8,
}

impl MViewColor {
    pub fn to_hex(self) -> String {
        format!("#{:02X}{:02X}{:02X}", self.r, self.g, self.b)
    }
}

const BLACK: MViewColor = MViewColor {
    r: 0x00,
    g: 0x00,
    b: 0x00,
};
const WHITE: MViewColor = MViewColor {
    r: 0xff,
    g: 0xff,
    b: 0xff,
};
const RED: MViewColor = MViewColor {
    r: 0xff,
    g: 0x00,
    b: 0x00,
};
const LIME: MViewColor = MViewColor {
    r: 0x00,
    g: 0xff,
    b: 0x00,
};
const BLUE: MViewColor = MViewColor {
    r: 0x00,
    g: 0x00,
    b: 0xff,
};
const YELLOW: MViewColor = MViewColor {
    r: 0xff,
    g: 0xff,
    b: 0x00,
};
const CYAN: MViewColor = MViewColor {
    r: 0x00,
    g: 0xff,
    b: 0xff,
};
const MAGENTA: MViewColor = MViewColor {
    r: 0xff,
    g: 0x00,
    b: 0xff,
};
const MAROON: MViewColor = MViewColor {
    r: 0x80,
    g: 0x00,
    b: 0x00,
};
const OLIVE: MViewColor = MViewColor {
    r: 0x80,
    g: 0x80,
    b: 0x00,
};
const GREEN: MViewColor = MViewColor {
    r: 0x00,
    g: 0x80,
    b: 0x00,
};
const PURPLE: MViewColor = MViewColor {
    r: 0x80,
    g: 0x00,
    b: 0x80,
};
const TEAL: MViewColor = MViewColor {
    r: 0x00,
    g: 0x80,
    b: 0x80,
};
const NAVY: MViewColor = MViewColor {
    r: 0x00,
    g: 0x00,
    b: 0x80,
};
const DIM_GRAY: MViewColor = MViewColor {
    r: 0x69,
    g: 0x69,
    b: 0x69,
};
const GAINSBORO: MViewColor = MViewColor {
    r: 0xdc,
    g: 0xdc,
    b: 0xdc,
};
const WHITE_SMOKE: MViewColor = MViewColor {
    r: 0xf5,
    g: 0xf5,
    b: 0xf5,
};
const ASH_GRAY: MViewColor = MViewColor {
    r: 0xb2,
    g: 0xbe,
    b: 0xb5,
};
const BLUE_GRAY: MViewColor = MViewColor {
    r: 0x73,
    g: 0x93,
    b: 0xb3,
};
const CHARCOAL: MViewColor = MViewColor {
    r: 0x36,
    g: 0x45,
    b: 0x4f,
};
const DARK_GRAY: MViewColor = MViewColor {
    r: 0xa9,
    g: 0xa9,
    b: 0xa9,
};
const GLAUCOUS: MViewColor = MViewColor {
    r: 0x60,
    g: 0x82,
    b: 0xb6,
};
const GRAY: MViewColor = MViewColor {
    r: 0x80,
    g: 0x80,
    b: 0x80,
};
const GUNMETAL_GRAY: MViewColor = MViewColor {
    r: 0x81,
    g: 0x85,
    b: 0x89,
};
const LIGHT_GRAY: MViewColor = MViewColor {
    r: 0xd3,
    g: 0xd3,
    b: 0xd3,
};
const PEWTER: MViewColor = MViewColor {
    r: 0x89,
    g: 0x94,
    b: 0x99,
};
const PLATINUM: MViewColor = MViewColor {
    r: 0xe5,
    g: 0xe4,
    b: 0xe2,
};
const SAGE_GREEN: MViewColor = MViewColor {
    r: 0x8a,
    g: 0x9a,
    b: 0x5b,
};
const SILVER: MViewColor = MViewColor {
    r: 0xc0,
    g: 0xc0,
    b: 0xc0,
};
const SLATE_GRAY: MViewColor = MViewColor {
    r: 0x70,
    g: 0x80,
    b: 0x90,
};
const SMOKE: MViewColor = MViewColor {
    r: 0x84,
    g: 0x88,
    b: 0x84,
};
const STEEL_GRAY: MViewColor = MViewColor {
    r: 0x71,
    g: 0x79,
    b: 0x7e,
};
const FOLDER_BACK: MViewColor = MViewColor {
    r: 0x1e,
    g: 0x33,
    b: 0x19,
};
const FOLDER_TITLE: MViewColor = MViewColor {
    r: 0x94,
    g: 0xbc,
    b: 0x8a,
};
const FOLDER_MSG: MViewColor = MViewColor {
    r: 0xc0,
    g: 0xce,
    b: 0xbf,
};
const ARCHIVE_BACK: MViewColor = MViewColor {
    r: 0x23,
    g: 0x21,
    b: 0x3c,
};
const ARCHIVE_TITLE: MViewColor = MViewColor {
    r: 0x89,
    g: 0xa6,
    b: 0xd2,
};
const ARCHIVE_MSG: MViewColor = MViewColor {
    r: 0xc3,
    g: 0xcc,
    b: 0xd9,
};
const UNSUPPORTED_BACK: MViewColor = MViewColor {
    r: 0x29,
    g: 0x25,
    b: 0x00,
};
const UNSUPPORTED_TITLE: MViewColor = MViewColor {
    r: 0xc4,
    g: 0xb8,
    b: 0x50,
};
const UNSUPPORTED_MSG: MViewColor = MViewColor {
    r: 0xd0,
    g: 0xcc,
    b: 0x9f,
};
const ERROR_BACK: MViewColor = MViewColor {
    r: 0x37,
    g: 0x20,
    b: 0x20,
};
const ERROR_TITLE: MViewColor = MViewColor {
    r: 0xb3,
    g: 0x88,
    b: 0x88,
};
const ERROR_MSG: MViewColor = MViewColor {
    r: 0xdb,
    g: 0xb5,
    b: 0xb5,
};
